{"version":3,"sources":["App.js","serviceWorker.js","index.js","getWeb3.js","ipfs.js","components/home/home.js"],"names":["Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","getWeb3","Promise","resolve","reject","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","ipfs","require","host","port","protocol","Home","props","state","accounts","contract","buffer","ipfsHash","imageStatus","showMessage","verified","showVerified","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","Certification","networks","instance","Contract","abi","address","setState","alert","error","sendHash","value","methods","generateCertificate","send","from","gas","getHash","call","response","onSubmitStudent","e","preventDefault","ipfs_hash","certificates","certficate","_showMessage","bool","onSubmitCompany","forceUpdate","isVerified","verify_result","captureFile","bind","onSubmit","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","result","add","this","err","hash","className","id","aria-hidden","href","type","tabIndex","htmlFor","data-text","style","border","borderRadius","backgroundColor","aria-label","onChange","xmlns","width","height","viewBox","d","onClick","src","alt"],"mappings":"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","file":"static/js/main.466f61ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Certification from \"./contracts/Certification.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport ipfs from \"./ipfs\";\r\nimport { Button } from 'reactstrap';\r\n\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n      console.log(accounts);\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = Certification.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        Certification.abi,\r\n        deployedNetwork && deployedNetwork.address\r\n      );\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, contract: instance });\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Your Image</h1>\r\n        <p>This image is store on IPFS & Ethereum blockhain!</p>\r\n        <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} alt=\"\" />\r\n        <h2>Upload Image</h2>\r\n        <div className=\"login-wrap\">\r\n          <div className=\"container login-html\">\r\n            <form onSubmit={this.onSubmit} className=\"form\">\r\n                <div className=\"login-form\">\r\n                  <div className=\"group\">\r\n                    <label htmlFor=\"user\" className=\"label\">\r\n                      ID\r\n                    </label>\r\n                    <input id=\"cert-id\" placeholder=\"ID\" className=\"input\" />\r\n                    <label htmlFor=\"user\" className=\"label\">\r\n                      Receipient Name\r\n                    </label>\r\n                    <input\r\n                      id=\"name\"\r\n                      placeholder=\"Receipient Name\"\r\n                      className=\"input\"\r\n                    />\r\n                    <label htmlFor=\"user\" className=\"label\">\r\n                      Organization\r\n                    </label>\r\n                    <input\r\n                      id=\"org-name\"\r\n                      placeholder=\"Organization\"\r\n                      className=\"input\"\r\n                    />\r\n                    <label htmlFor=\"user\" className=\"label\">\r\n                      Course name\r\n                    </label>\r\n                    <input\r\n                      id=\"course-name\"\r\n                      placeholder=\"Course Name\"\r\n                      className=\"input\"\r\n                    />\r\n                    <label htmlFor=\"user\" className=\"label\">\r\n                      Upload\r\n                    </label>\r\n\r\n                    <label className=\"file\">\r\n                      <Button\r\n                        style={{\r\n                          border: \"1px solid #494949\",\r\n                          borderRadius: \"50px\",\r\n                          backgroundColor: \"#F7F7F7\",\r\n                        }}\r\n                      >\r\n                        <input\r\n                          type=\"file\"\r\n                          id=\"file\"\r\n                          aria-label=\"File browser example\"\r\n                          onChange={this.captureFile}\r\n                        />\r\n                      </Button>\r\n                      <input type=\"submit\" class=\"button\" value=\"Upload & Submit\" />\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n            </form>\r\n          </div>\r\n          {<div style={{position: 'absolute', bottom: '25px', left: '20px', color: 'white'}} >Hash is: {this.state.ipfsHash}</div>}\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Home from './components/home/home'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n    <Home />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","const IPFS = require('ipfs-api');\r\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\r\n\r\nexport default ipfs;","import React, { Component } from 'react'\r\nimport Certification from '../../../src/contracts/Certification.json'\r\nimport getWeb3 from '../../getWeb3'\r\nimport ipfs from '../../ipfs'\r\nimport { FaAdn } from 'react-icons/fa';\r\nimport { Button } from 'reactstrap'\r\nimport '../styles/home.scss'\r\nimport '../styles/form.scss'\r\nimport '../styles/button.scss'\r\nimport '../styles/submit_btn.scss'\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.captureFile = this.captureFile.bind(this)\r\n    this.onSubmit = this.onSubmit.bind(this)\r\n  }\r\n  state = {\r\n    web3: null,\r\n    accounts: null,\r\n    contract: null,\r\n    buffer: null,\r\n    ipfsHash: '',\r\n    imageStatus: false,\r\n    showMessage: false,\r\n    verified: null,\r\n    showVerified: false\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3()\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts()\r\n      console.log(accounts)\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId()\r\n      const deployedNetwork = Certification.networks[networkId]\r\n      const instance = new web3.eth.Contract(\r\n        Certification.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      )\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, contract: instance })\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      )\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  sendHash = async () => {\r\n    const { accounts, contract } = this.state\r\n    console.log(document.getElementById('email').value)\r\n    await contract.methods\r\n      .generateCertificate(\r\n        document.getElementById('email').value,\r\n        document.getElementById('name').value,\r\n        document.getElementById('org-name').value,\r\n        document.getElementById('course-name').value,\r\n        this.state.ipfsHash,\r\n      )\r\n      .send({ from: accounts[0], gas: 3000000 })\r\n\r\n    const response = await contract.methods\r\n      .getHash(document.getElementById('email').value)\r\n      .call()\r\n    console.log(response)\r\n    // Update state with the result.\r\n    this.setState({ ipfsHash: response })\r\n  }\r\n\r\n  captureFile(e) {\r\n    e.preventDefault()\r\n    const file = e.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) })\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault()\r\n    console.log('onSubmit...')\r\n    ipfs.files.add(this.state.buffer, (err, result) => {\r\n      if (err) {\r\n        console.error('error')\r\n        return\r\n      }\r\n      this.setState({ ipfsHash: result[0].hash })\r\n      console.log('ipfsHash', this.state.ipfsHash)\r\n      this.sendHash()\r\n    })\r\n  }\r\n\r\n  onSubmitStudent = async (e) => {\r\n    const { contract } = this.state\r\n    e.preventDefault()\r\n    const ipfs_hash = await contract.methods\r\n      .getHash(document.getElementById('student-email').value)\r\n      .call()\r\n    const certficate = await contract.methods\r\n      .certificates(document.getElementById('student-email').value)\r\n      .call()\r\n    this.setState({ ipfsHash: ipfs_hash })\r\n    console.log(certficate)\r\n    return null\r\n  }\r\n\r\n  _showMessage = (bool) => {\r\n    const { ipfs_hash } = this.state\r\n    this.setState({\r\n      showMessage: bool,\r\n      ipfs_hash: ipfs_hash,\r\n    })\r\n  }\r\n\r\n  onSubmitCompany = async (e) => {\r\n    this.forceUpdate();\r\n    const { contract } = this.state\r\n    e.preventDefault()\r\n    const verify_result = await contract.methods\r\n      .isVerified(document.getElementById('cert-id').value)\r\n      .call()\r\n    console.log(document.getElementById('cert-id').value)\r\n    console.log(verify_result)\r\n    this.setState({verified: verify_result, showVerified: true})\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>\r\n    }\r\n    return (\r\n      <div>\r\n                  <i className=\"fa\" ><FaAdn /></i>\r\n        <section className=\"et-hero-tabs\">\r\n          <h1>Certification System</h1>\r\n          <h3>Using Etherum Blockchain</h3>\r\n          <div id=\"container\" className=\"pt-4\">\r\n            <button className=\"log-in\">\r\n              <span className=\"circle\" aria-hidden=\"true\">\r\n                <span className=\"icon arrow\"></span>\r\n              </span>\r\n              <span className=\"button-text\">Log-In</span>\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"et-hero-tabs-container\">\r\n            <a className=\"et-hero-tab-u\" href=\"#tab-university\">\r\n              University\r\n            </a>\r\n            <a className=\"et-hero-tab\" href=\"#tab-student\">\r\n              Student\r\n            </a>\r\n            <a className=\"et-hero-tab\" href=\"#tab-company\">\r\n              Company\r\n            </a>\r\n            <span className=\"et-hero-tab-slider\"></span>\r\n          </div>\r\n        </section>\r\n\r\n        <main className=\"et-main\">\r\n          <section className=\"et-slider\" id=\"tab-university\">\r\n            <div className=\"row\">\r\n              <div>\r\n                <h1>University</h1>\r\n                <h3> Upload a Certificate</h3>\r\n              </div>\r\n              <div className=\"container\">\r\n                <h2>Upload Data</h2>\r\n                <form onSubmit={this.onSubmit} className=\"form\">\r\n                  <fieldset className=\"form-fieldset ui-input __first\">\r\n                    <input type=\"email\" id=\"email\" tabIndex=\"0\" />\r\n                    <label htmlFor=\"username\">\r\n                      <span data-text=\"E-mail Address\">E-mail Address</span>\r\n                    </label>\r\n                  </fieldset>\r\n\r\n                  <fieldset className=\"form-fieldset ui-input __second\">\r\n                    <input type=\"text\" id=\"name\" tabIndex=\"0\" />\r\n                    <label htmlFor=\"name\">\r\n                      <span data-text=\"Name\">Name</span>\r\n                    </label>\r\n                  </fieldset>\r\n\r\n                  <fieldset className=\"form-fieldset ui-input __third\">\r\n                    <input type=\"text\" id=\"org-name\" />\r\n                    <label htmlFor=\"new-password\">\r\n                      <span data-text=\"Organization\">Organization</span>\r\n                    </label>\r\n                  </fieldset>\r\n\r\n                  <fieldset className=\"form-fieldset ui-input __fourth\">\r\n                    <input type=\"text\" id=\"course-name\" />\r\n                    <label htmlFor=\"repeat-new-password\">\r\n                      <span data-text=\"Courses\">Courses</span>\r\n                    </label>\r\n                  </fieldset>\r\n\r\n                  <label className=\"file\">\r\n                    <Button\r\n                      style={{\r\n                        border: '1px solid #494949',\r\n                        borderRadius: '50px',\r\n                        backgroundColor: '#F7F7F7',\r\n                      }}\r\n                    >\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"file\"\r\n                        aria-label=\"File browser example\"\r\n                        onChange={this.captureFile}\r\n                      />\r\n                    </Button>\r\n                    <input\r\n                      type=\"submit\"\r\n                      className=\"btn-u\"\r\n                      value=\"Upload & Submit\"\r\n                    />\r\n                  </label>\r\n                  <div className=\"form-footer\">\r\n                    <div id=\"container\" className=\"pt-14\">\r\n                      <button className=\"log-in\">\r\n                        <span className=\"circle\" aria-hidden=\"true\">\r\n                          <span className=\"icon arrow\"></span>\r\n                        </span>\r\n                        <span className=\"button-text\">Upload</span>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </section>\r\n\r\n          <section className=\"et-slide-student\" id=\"tab-student\">\r\n            <h1>Student</h1>\r\n            <form onSubmit={this.onSubmitStudent} className=\"form\">\r\n              <fieldset className=\"form-fieldset ui-input __first\">\r\n                <input type=\"text\" id=\"student-email\" tabIndex=\"0\" />\r\n                <label htmlFor=\"student-email\">\r\n                  <span data-text=\"E-mail Address\">E-mail Address</span>\r\n                </label>\r\n              </fieldset>\r\n              <div className=\"form-footer\">\r\n                <div className=\"d-flex justify-content-center pb-3\">\r\n                  <button type=\"submit\" className=\"button-submit\">\r\n                    <span>Submit</span>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path d=\"M0 11c2.761.575 6.312 1.688 9 3.438 3.157-4.23 8.828-8.187 15-11.438-5.861 5.775-10.711 12.328-14 18.917-2.651-3.766-5.547-7.271-10-10.917z\" />\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n            <Button onClick={this._showMessage.bind(null, true)}>\r\n              Show Image\r\n            </Button>\r\n            {this.state.showMessage && (\r\n              <div>\r\n                <a\r\n                  href={`https://ipfs.io/ipfs/${this.state.ipfsHash}`}\r\n                  target=\"_blank\"\r\n                >\r\n                  <img\r\n                    src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`}\r\n                    alt=\"\"\r\n                  />\r\n                </a>\r\n              </div>\r\n            )}\r\n          </section>\r\n          <section className=\"et-slide-company\" id=\"tab-company\">\r\n            <h1>Company</h1>\r\n            <form onSubmit={this.onSubmitCompany} className=\"form\">\r\n              <fieldset className=\"form-fieldset ui-input __first\">\r\n                <input type=\"text\" id=\"cert-id\" tabIndex=\"0\" />\r\n                <label htmlFor=\"cert-id\">\r\n                  <span data-text=\"Certificate ID\">Certificate ID</span>\r\n                </label>\r\n              </fieldset>\r\n              <div className=\"form-footer\">\r\n                <div className=\"d-flex justify-content-center pb-3\">\r\n                <button type=\"submit\" className=\"button-submit\">\r\n                    <span>Submit</span>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path d=\"M0 11c2.761.575 6.312 1.688 9 3.438 3.157-4.23 8.828-8.187 15-11.438-5.861 5.775-10.711 12.328-14 18.917-2.651-3.766-5.547-7.271-10-10.917z\" />\r\n                    </svg>\r\n                  </button>\r\n                  </div>\r\n              </div>\r\n            </form>\r\n            {this.state.showVerified && (<div><h2>This Certificate ID has</h2> {this.state.verified ? (<div><h2>Already Verified<img className=\"icon\" src=\"./images/check.png\"  alt=\"verified-icon\" /></h2></div>):(<div><h2>Not Verify<img className=\"icon\" src=\"./images/cross.png\"  alt=\"unverified-icon\" /></h2></div>)}</div> ) }\r\n          </section>\r\n        </main>\r\n      </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\n"],"sourceRoot":""}