{"version":3,"sources":["components/home/header.js","serviceWorker.js","index.js","getWeb3.js","components/home/home.js","ipfs.js","components/home/modal.js"],"names":["header","props","state","web3","accounts","contract","componentDidMount","a","getWeb3","eth","getAccounts","src","console","log","setState","alert","error","className","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Promise","resolve","reject","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","Home","net","getId","networkId","deployedNetwork","Certification","networks","instance","Contract","abi","address","sendHash","e","preventDefault","d","Date","methods","generateCertificate","email","candidate","org","course","ipfsHash","getDate","getMonth","getFullYear","send","from","gas","result","ipfs","files","add","buffer","err","hash","events","CertificateGenerated","returnValues","onSubmitStudentCertID","getCertificate","certId","call","certificate","onSubmitStudentEmail","getAllCertificate","certificateID","_showMessage","bool","ipfs_hash","showMessage","onSubmitCompany","forceUpdate","isVerified","verify_result","verified","showVerified","onSubmitModal","issuerRegister","value","receipt","IssuerRegistered","captureFile","bind","handleChange","imageStatus","name","event","target","file","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","id","aria-hidden","title","cancelButtonText","actionButtonText","buttonText","whenClicked","whenChange","href","onSubmit","type","tabIndex","onChange","htmlFor","data-text","style","border","borderRadius","padding","backgroundColor","marginTop","aria-label","placeholder","onClick","xmlns","width","height","viewBox","map","alt","require","host","port","protocol","ModalComponent","useState","modal","setModal","toggle","animation","isOpen"],"mappings":"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","file":"static/js/main.6e6f80e4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport getWeb3 from '../../getWeb3'\r\nimport '../styles/header.scss'\r\n\r\nexport default class header extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        web3: null,\r\n        accounts: null,\r\n        contract: null,\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        try {\r\n          // Get network provider and web3 instance.\r\n          const web3 = await getWeb3()\r\n    \r\n          // Use web3 to get the user's accounts.\r\n          const accounts = await web3.eth.getAccounts()\r\n          const src = accounts[0]\r\n          console.log(src)\r\n    \r\n          // Set web3, accounts, and contract to the state, and then proceed with an\r\n          // example of interacting with the contract's methods.\r\n          this.setState({ web3, accounts: src})\r\n        } catch (error) {\r\n          // Catch any errors for any of the above operations.\r\n          alert(\r\n            `Failed to load web3, accounts, or contract. Check console for details.`,\r\n          )\r\n          console.error(error)\r\n        }\r\n      } \r\n    \r\n  render() {\r\n    return (\r\n      <nav className=\"nav-bar\">\r\n          <li>Account</li>\r\n          <li>{this.state.accounts}</li>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Home from './components/home/home'\r\nimport Header from './components/home/header'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n    <Header />\r\n    <Home />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:7545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from 'react'\r\nimport Certification from '../../../src/contracts/Certification.json'\r\nimport getWeb3 from '../../getWeb3'\r\nimport ipfs from '../../ipfs'\r\nimport ModalComponent from './modal.js'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\nimport '../styles/home.scss'\r\nimport '../styles/form.scss'\r\nimport '../styles/button.scss'\r\nimport '../styles/submit_btn.scss'\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.captureFile = this.captureFile.bind(this)\r\n    this.sendHash = this.sendHash.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.state = {\r\n      web3: null,\r\n      accounts: null,\r\n      contract: null,\r\n      buffer: null,\r\n      ipfsHash: '',\r\n      imageStatus: false,\r\n      showMessage: false,\r\n      verified: null,\r\n      showVerified: false,\r\n      certificateID: [],\r\n      email:'',\r\n      name:'',\r\n      candidate:'',\r\n      org:'',\r\n      course:'',\r\n      certId:'',\r\n      address:''\r\n    }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3()\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts()\r\n      console.log(accounts)\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId()\r\n      const deployedNetwork = Certification.networks[networkId]\r\n      const instance = new web3.eth.Contract(\r\n        Certification.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      )\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, contract: instance })\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({\r\n      // Computed property names\r\n      // keys of the objects are computed dynamically\r\n      [event.target.name] : event.target.value\r\n    })\r\n  }\r\n\r\n  sendHash = async (e) => {\r\n    e.preventDefault();\r\n    const { accounts, contract } = this.state;\r\n    const d = new Date();\r\n    await contract.methods\r\n      .generateCertificate(\r\n        this.state.email,\r\n        this.state.candidate,\r\n        this.state.org,\r\n        this.state.course,\r\n        this.state.ipfsHash,\r\n        d.getDate() + \"-\" + d.getMonth() + \"-\" + d.getFullYear()\r\n      )\r\n      .send({ from: accounts[0], gas: 3000000 })\r\n      .then(\r\n        (result) => {\r\n          console.log(\"onSubmit...\");\r\n          ipfs.files.add(this.state.buffer, (err, result) => {\r\n            if (err) {\r\n              console.error(\"error\");\r\n              return;\r\n            }\r\n            this.setState({ ipfsHash: result[0].hash });\r\n            console.log(\"ipfsHash\", this.state.ipfsHash);\r\n          });\r\n          console.log(result.events.CertificateGenerated.returnValues);\r\n        },\r\n        (error) => {\r\n          alert(\"You are not allow\");\r\n        }\r\n      );\r\n      alert(\"Upload successfully!\")\r\n      this.setState({email: '', candidate:'', org:'', course:''})\r\n  };\r\n\r\n  captureFile(e) {\r\n    e.preventDefault()\r\n    const file = e.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) })\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n  }\r\n\r\n  onSubmitStudentCertID = async (e) => {\r\n    const { contract } = this.state\r\n    e.preventDefault()\r\n    const certificate = await contract.methods\r\n      .getCertificate(this.state.certId)\r\n      .call()\r\n    this.setState({ ipfsHash: certificate[4]})\r\n    console.log(certificate)\r\n  }\r\n\r\n  onSubmitStudentEmail = async (e) => {\r\n    const { contract } = this.state\r\n    e.preventDefault()\r\n    const certificate = await contract.methods\r\n      .getAllCertificate(this.state.email)\r\n      .call()\r\n    this.setState({ certificateID: certificate})\r\n    console.log(certificate)\r\n  }\r\n\r\n\r\n\r\n  _showMessage = (bool) => {\r\n    const { ipfs_hash } = this.state\r\n    this.setState({\r\n      showMessage: bool,\r\n      ipfs_hash: ipfs_hash,\r\n    })\r\n  }\r\n\r\n  onSubmitCompany = async (e) => {\r\n    this.forceUpdate();\r\n    const { contract } = this.state\r\n    e.preventDefault()\r\n    const verify_result = await contract.methods\r\n      .isVerified(this.state.certId)\r\n      .call()\r\n    console.log(this.state.certId)\r\n    console.log(verify_result)\r\n    this.setState({verified: verify_result, showVerified: true})\r\n  }\r\n\r\n  onSubmitModal = async (e) => {\r\n    e.preventDefault()\r\n    const { accounts, contract } = this.state\r\n    const receipt = await contract.methods\r\n      .issuerRegister(\r\n        document.getElementById('issuer-address').value)\r\n      .send({ from: accounts[2], gas: 3000000 })\r\n      console.log(receipt.events.IssuerRegistered.returnValues)\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>\r\n    }\r\n    return (\r\n      <div>\r\n        <section className=\"et-hero-tabs\">\r\n          <h1>Certification System</h1>\r\n          <h3>Using Etherum Blockchain</h3>\r\n          <div id=\"container\" className=\"pt-4\">\r\n            <button className=\"log-in\">\r\n              <span className=\"circle\" aria-hidden=\"true\">\r\n                <span className=\"icon arrow\"></span>\r\n              </span>\r\n              <span className=\"button-text\">\r\n                <ModalComponent\r\n                  title=\"Register Issuer\"\r\n                  cancelButtonText=\"Cancel\"\r\n                  actionButtonText=\"Submit\"\r\n                  buttonText=\"Register\"\r\n                  whenClicked={this.onSubmitModal}\r\n                  whenChange={this.handleChange}\r\n                />\r\n              </span>\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"et-hero-tabs-container\">\r\n            <a className=\"et-hero-tab-u\" href=\"#tab-university\">\r\n              University\r\n            </a>\r\n            <a className=\"et-hero-tab\" href=\"#tab-student\">\r\n              Student\r\n            </a>\r\n            <a className=\"et-hero-tab\" href=\"#tab-company\">\r\n              Company\r\n            </a>\r\n            <span className=\"et-hero-tab-slider\"></span>\r\n          </div>\r\n        </section>\r\n\r\n        <main className=\"et-main\">\r\n          <section className=\"et-slider\" id=\"tab-university\">\r\n            <div className=\"row\">\r\n              <div>\r\n                <h1>University</h1>\r\n                <h3> Upload a Certificate</h3>\r\n              </div>\r\n              <div className=\"container\">\r\n                <h2>Upload Data</h2>\r\n                <form onSubmit={this.sendHash} className=\"form\">\r\n                  <fieldset className=\"form-fieldset ui-input __first\">\r\n                    <input type=\"email\" name=\"email\" id=\"email\" tabIndex=\"0\" value={this.state.email} onChange={this.handleChange}/>\r\n                    <label htmlFor=\"username\">\r\n                      <span data-text=\"E-mail Address\">E-mail Address</span>\r\n                    </label>\r\n                  </fieldset>\r\n\r\n                  <fieldset className=\"form-fieldset ui-input __second\">\r\n                    <input type=\"text\" name=\"candidate\" id=\"candidate\" tabIndex=\"0\" value={this.state.candidate} onChange={this.handleChange}/>\r\n                    <label htmlFor=\"name\">\r\n                      <span data-text=\"Name\">Name</span>\r\n                    </label>\r\n                  </fieldset>\r\n\r\n                  <fieldset className=\"form-fieldset ui-input __third\">\r\n                    <input type=\"text\" name=\"org\" id=\"org-name\" value={this.state.org} onChange={this.handleChange} />\r\n                    <label htmlFor=\"new-password\">\r\n                      <span data-text=\"Organization\">Organization</span>\r\n                    </label>\r\n                  </fieldset>\r\n\r\n                  <fieldset className=\"form-fieldset ui-input __fourth\">\r\n                    <input type=\"text\" name=\"course\" id=\"course-name\" value={this.state.course} onChange={this.handleChange}/>\r\n                    <label htmlFor=\"repeat-new-password\">\r\n                      <span data-text=\"Courses\">Courses</span>\r\n                    </label>\r\n                  </fieldset>\r\n\r\n                  <label className=\"file\">\r\n                    <div\r\n                      style={{\r\n                        border: \"1px solid #494949\",\r\n                        borderRadius: \"50px\",\r\n                        padding: \"10px\",\r\n                        backgroundColor: \"#F7F7F7\",\r\n                        marginTop: \"20px\"\r\n                      }}\r\n                    >\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"file\"\r\n                        aria-label=\"File browser example\"\r\n                        onChange={this.captureFile}\r\n                      />\r\n                    </div>\r\n                  </label>\r\n                  <div className=\"form-footer\">\r\n                    <div id=\"container\" className=\"pt-14\">\r\n                      <button className=\"log-in\">\r\n                        <span className=\"circle\" aria-hidden=\"true\">\r\n                          <span className=\"icon arrow\"></span>\r\n                        </span>\r\n                        <span className=\"button-text\">Upload</span>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </section>\r\n\r\n          <section className=\"et-slide-student\" id=\"tab-student\">\r\n            <h1>Student</h1>\r\n            <div className=\"student-form\">\r\n              <form onSubmit={this.onSubmitStudentCertID} className=\"form\">\r\n                <fieldset className=\"form-fieldset ui-input __first\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"certId\"\r\n                    id=\"certId\"\r\n                    tabIndex=\"0\"\r\n                    placeholder=\"For display Certificate\"\r\n                    onChange={this.handleChange}\r\n                  />\r\n                  <label htmlFor=\"certId\">\r\n                    <span data-text=\"certId\">Certificate ID</span>\r\n                  </label>\r\n                </fieldset>\r\n                <div className=\"d-flex justify-content-center pb-3\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"button-submit\"\r\n                    onClick={this._showMessage.bind(null, true)}\r\n                  >\r\n                    <span>Submit</span>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path d=\"M0 11c2.761.575 6.312 1.688 9 3.438 3.157-4.23 8.828-8.187 15-11.438-5.861 5.775-10.711 12.328-14 18.917-2.651-3.766-5.547-7.271-10-10.917z\" />\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </form>\r\n              <form onSubmit={this.onSubmitStudentEmail} className=\"form\">\r\n                <fieldset className=\"form-fieldset ui-input __second\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    tabIndex=\"0\"\r\n                    placeholder=\"For display all certiicate ID\"\r\n                    onChange={this.handleChange}\r\n                  />\r\n                  <label htmlFor=\"email\">\r\n                    <span data-text=\"E-mail Address\">E-mail Address</span>\r\n                  </label>\r\n                </fieldset>\r\n                <div className=\"d-flex justify-content-center pb-3\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"button-submit\"\r\n                    onClick={this._showMessage.bind(null, true)}\r\n                  >\r\n                    <span>Submit</span>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path d=\"M0 11c2.761.575 6.312 1.688 9 3.438 3.157-4.23 8.828-8.187 15-11.438-5.861 5.775-10.711 12.328-14 18.917-2.651-3.766-5.547-7.271-10-10.917z\" />\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            {this.state.showMessage && (\r\n              <div>\r\n                <div>\r\n                  {this.state.certificateID.map((id) => (\r\n                    <li>{id}</li>\r\n                  ))}\r\n                </div>\r\n                <a\r\n                  href={`https://ipfs.io/ipfs/${this.state.ipfsHash}`}\r\n                  target=\"_blank\"\r\n                >\r\n                  <img\r\n                    src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`}\r\n                    alt=\"\"\r\n                  />\r\n                </a>\r\n              </div>\r\n            )}\r\n          </section>\r\n          <section className=\"et-slide-company\" id=\"tab-company\">\r\n            <h1>Company</h1>\r\n            <form onSubmit={this.onSubmitCompany} className=\"form\">\r\n              <fieldset className=\"form-fieldset ui-input __first\">\r\n                <input type=\"text\" name=\"certId\" id=\"certId\" tabIndex=\"0\" onChange={this.handleChange} />\r\n                <label htmlFor=\"certId\">\r\n                  <span data-text=\"Certificate ID\">Certificate ID</span>\r\n                </label>\r\n              </fieldset>\r\n              <div className=\"form-footer\">\r\n                <div className=\"d-flex justify-content-center pb-3\">\r\n                  <button type=\"submit\" className=\"button-submit\">\r\n                    <span>Submit</span>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path d=\"M0 11c2.761.575 6.312 1.688 9 3.438 3.157-4.23 8.828-8.187 15-11.438-5.861 5.775-10.711 12.328-14 18.917-2.651-3.766-5.547-7.271-10-10.917z\" />\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n            {this.state.showVerified && (\r\n              <div>\r\n                <h2>This Certificate ID has</h2>{\" \"}\r\n                {this.state.verified ? (\r\n                  <div>\r\n                    <h2>\r\n                      Already Verified\r\n                      <img\r\n                        className=\"icon\"\r\n                        src=\"./images/check.png\"\r\n                        alt=\"verified-icon\"\r\n                      />\r\n                    </h2>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <h2>\r\n                      Not Verify\r\n                      <img\r\n                        className=\"icon\"\r\n                        src=\"./images/cross.png\"\r\n                        alt=\"unverified-icon\"\r\n                      />\r\n                    </h2>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </section>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","const IPFS = require('ipfs-api');\r\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\r\n\r\nexport default ipfs;","import React, { useState } from \"react\";\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\r\n\r\n// NOTICE\r\n// Modal is brought in with it's own trigger, so import the component where you want the trigger to be.\r\n\r\nconst ModalComponent = (props) => {\r\n  const {\r\n    buttonText,\r\n    title,\r\n    actionButtonText,\r\n    cancelButtonText,\r\n    className,\r\n    whenClicked\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div onClick={toggle}>{buttonText}</div>\r\n      <Modal animation={\"false\"} isOpen={modal} toggle={toggle} className={className}>\r\n        <form onSubmit={whenClicked}>\r\n          <ModalHeader className=\" border-1\">\r\n            {title}\r\n          </ModalHeader>\r\n          <ModalBody className=\"text-left border-0\">\r\n            <p className=\"modal-label\">Eenter Issuer Address</p>\r\n     \r\n                <input type=\"text\" name=\"address\" id=\"issuer-address\" name=\"issuer-address\"className=\"form-control\" placeholder=\"Address\" />\r\n\r\n          </ModalBody>\r\n          <ModalFooter className=\"modal-footer border-0\">\r\n            <Button className=\"btn_secondary modal-btn\" onClick={toggle}>\r\n              {cancelButtonText}\r\n            </Button>{\" \"}\r\n            &nbsp;&nbsp;\r\n            <Button className=\"btn btn_primary modal-btn\" type=\"submit\">\r\n                {actionButtonText}\r\n            </Button>\r\n          </ModalFooter>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalComponent;"],"sourceRoot":""}